# Key
@startuml Key
!theme toy
package TheKey {
    Key : +Public Member
    Key : #Protected Member
    Key : -Private Member
    Key : {static}Static Member
    Key : ~{abstract}Pure Virtual Method()=0
    Key : ~Virtual Method()
    Key : +Public Method()
    Key : #Protected Method()
    Key : -Private Method()
    Key : {static}Static Method()
}
@enduml

# Class Diagram
@startuml NewDesign.png
!theme toy
title Terminal, The Game Class Diagram

Abstract Manager
' Manager <|-- "is-a" PlayerManager
Manager <|-- "is-a" LevelManager
Manager <|-- "is-a" EventManager
Manager : Communicates with Registry
Manager : ~RegistryPoll()=0
Manager : ~RegistryPush()=0
Manager : -ManagerType



' note left of Player::skillLevel
' Is this necessary at this point?
' What will a 'skillLevel' grant the player?
' end note

' note left of Player::XP
' Same story here... what will leveling up do
' for the player?
' end note

' Player --* "has-\naccess\n-to" PlayerManager
' Player : -string name
' Player : -int skillLevel
' Player : -int XP
' Player : +GetName()
' Player : +GetSkillLevel()
' Player : +GetXP()



' note left of PlayerManager
' Argument: Do we need a "Player"?
' Or do we just need a character name..
' end note
' PlayerManager ---* "has-\naccess\n-to" Registry
' PlayerManager : Polls registry for:\n - Player skillLevel\n - Player XP



Level ---* "has-\naccess\n-to" Registry
Level "pushes an \nEventRequest to the \nEventManager" --> EventManager
Level : Displays script text to UI
Level : -int levelID
Level : -vector<trigger> triggers
Level : -int GrantedXP
Level : +GetLevelID()
Level : +GetTriggerNum()
Level : +GetGrantedXP()
Level : -ParseJSON()
Level : -DisplayMessage()
Level : -PrintNextScriptLine()


LevelManager ----> "launches as \na thread" Level
LevelManager ---* "has-\naccess\n-to" Registry
LevelManager : Polls registry for:\n - current level \n - lastCommand for level triggers
LevelManager : -LaunchLevel()
LevelManager : -vector<string> commands;

Event ---* "has-\naccess\n-to" Registry
Event : A game or system event
Event : -int eventID

EventManager ----> "launches as \na thread" Event
EventManager ---* "has-\naccess\n-to" Registry
EventManager : Global Manager
EventManager : Poll for filesystem change events
EventManager : Poll \~/.bash_history for command entry
EventManager : +mutex busy_lock
EventManager : -EventQueue
EventManager : +Heartbeat() (100msec)
EventManager : +PushEvent2Queue(EventRequest)
EventManager : -PollFilesystemChanges()
EventManager : -PollBashHistory()



Registry : Global - Objectified Registry.ini
Registry : +mutex busy_lock
Registry : +Heartbeat()(100 msec)
Registry : -struct Player
Registry : -struct Level
Registry : -struct Events
Registry : -Read()
Registry : -Update()



' Layout options
EventManager -[hidden]left-> EventManager
EventManager -[hidden]right-> LevelManager

package "main.cpp"
{
    note as 1
        Globals:
            EventManager
                -->Event threads
            Registry

        Objects in main:
            LevelManager
                --> Level threads
    end note
}


@enduml

# Flow Chart
@startuml FlowChat
title Game Engine Design
!theme toy
:Player spins up game environment
Gamefiles are installed appropriately
echo startScript into \~/.bashrc;
start
' :\~/.bashrc calls Terminal game;
switch(\~/.bashrc calls Terminal game)
' switch (startScript calls)
' case ()
'     :PlayerManager
'     Background process;
'     start
'     repeat
'         :Registry poll;
'         :Perform Player logic;
'         backward:Registry push;
'     repeat while (killsignal) is (no)
'         ->yes;
'     end
case ()
    :EventManager;
    start
    repeat:heartbeat
        :Registry poll;
        :Poll Last Command;
        :Poll Filesystem changes;
        backward:Registry push;
    repeat while (killsignal) is (no)
        ->yes;
    end
case ()
    :LevelManager;
    start
    repeat:heartbeat
        :Registry poll;
        if (correctLevel.launched?) then (no)
            :Launch Level(n);
            start
            repeat:heartbeat
            :Registry poll;
            if (lastCommand == goal trigger(s)?) then (yes)
                :Display Message;
                :Registry:LevelGoals++;
                if (trigger == last?) then (yes)
                    :Level Increment;
                    :Registry push;
                    stop
                else
                    ->no;
                endif
            else
                ->no;
            endif
            backward:Registry push;
            repeat while (trigger != last) is (no)
        endif

    backward:Registry push;
    repeat while (killsignal) is (no)
    end
case ()
    :Registry;
    start
    repeat:heartbeat
        :read from Registry.ini;
        if(manual changes ?) then (yes)
            :pull changes;
        endif

        if(updates finished from managers?) then (yes)
            :push changes;
        endif
    repeat while (killsignal) is (no)

    end
endswitch

@enduml

@startuml

@enduml